calculate_distence = function(v1,v2){
return(norm(as.matrix(v1-v2),c("2")))
}
### A is the matrix
### v0 is the initial vector
### eps contral the condition when will jump out the loop if it dose not reach the maxiter, if the distence between two vectors is smaller than eps, it will end for loop.
### maxiter the max iterations which this function will reach.
power_iteration = function(A, v0, eps = 1e-6, maxiter=100) {
# Please implement the function power_iteration that takes
# in the matrix X and initial vector v0 and returns the eigenvector.
pre = v0
for (i in 1:maxiter){
cur = A %*% pre
cur = cur / (norm(as.matrix(cur),c("2")))
dis = calculate_distence(pre,cur)
if (dis <= eps){
break()
}
else{
pre = cur
}
}
return(cur)
}
set.seed(5)
E = matrix(rnorm(100), 10, 10)
v = c(1, rep(0, 9))
lams = 1:10
prods = c()
for (lambda in lams) {
X = lambda*outer(v, v) + E
v0 = rep(1, nrow(E))
v0 = v0/sqrt(sum(v0^2))
vv = power_iteration(X, v0)
prods = c(prods, abs(v %*% vv))
}
plot(lams, prods, "b")
View(vv)
View(E)
